//Notification Icon 
"use client";

import React, { useState, useEffect } from "react";
import { Bell } from "lucide-react";
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { ChevronDown } from "lucide-react";
import { cn, formatRegistrationNumber } from "@/lib/utils";

import { TrainingAlert } from "@/lib/definitions";

function TranslateTrainingType(type: string): string {
  switch (type) {
    case "military":
      return "Militaire";
    case "scientific":
      return "Scientifique";
    case "language":
      return "Linguistique";
    case "internal":
      return "Interne";
    case "cybersecurity":
      return "Cybersécurité";
    default:
      return type;
  }
}

function getTrainingTypeColor(type: string): string {
  switch (type) {
    case "military":
      return "bg-red-100 text-red-800";
    case "scientific":
      return "bg-blue-100 text-blue-800";
    case "language":
      return "bg-green-100 text-green-800";
    case "internal":
      return "bg-purple-100 text-purple-800";
    case "cybersecurity":
      return "bg-yellow-100 text-yellow-800";
    default:
      return "bg-gray-100 text-gray-800";
  }
}

export function NotificationIcon() {
  const [alerts, setAlerts] = useState<TrainingAlert[]>([]);
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAlerts = async () => {
      setLoading(true);
      try {
        const response = await fetch("/api/alerts");
        if (response.ok) {
          const data = await response.json();
          setAlerts(data);
        }
      } catch (error) {
        console.error("Échec de récupération des alertes:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchAlerts();

    // Actualiser les alertes toutes les 10 minutes
    const interval = setInterval(fetchAlerts, 10 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon" className="relative">
          <Bell className="h-5 w-5" />
          {!loading && alerts.length > 0 && (
            <Badge
              variant="destructive"
              className="absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs"
            >
              {alerts.length}
            </Badge>
          )}
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[900px] max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            Formations à venir dans les 3 prochains jours
          </DialogTitle>
        </DialogHeader>
        {loading ? (
          <div className="flex justify-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </div>
        ) : (
          <TableFormations alerts={alerts} />
        )}
      </DialogContent>
    </Dialog>
  );
}

// Table des formations
function TableFormations({ alerts }: { alerts: TrainingAlert[] }) {
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());

  const toggleRow = (alertId: string) => {
    const newExpanded = new Set(expandedRows);
    if (newExpanded.has(alertId)) {
      newExpanded.delete(alertId);
    } else {
      newExpanded.add(alertId);
    }
    setExpandedRows(newExpanded);
  };

  if (alerts.length === 0) {
    return (
      <div className="text-center py-6 text-muted-foreground">
        Aucune formation à venir dans les 3 prochains jours.
      </div>
    );
  }

  return (
    <div className="border rounded-lg overflow-hidden">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Titre</TableHead>
            <TableHead>Type</TableHead>
            <TableHead>Date début</TableHead>
            <TableHead>Date fin</TableHead>
            <TableHead className="text-center">
              Nombre d&apos;Employés
            </TableHead>
            <TableHead className="w-16"></TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {alerts.map((alert) => {
            const isExpanded = expandedRows.has(alert.id);
            return (
              <React.Fragment key={alert.id}>
                <TableRow className={isExpanded ? "border-b-0" : ""}>
                  <TableCell>{alert.title}</TableCell>
                  <TableCell>
                    <Badge className={getTrainingTypeColor(alert.type)}>
                      {TranslateTrainingType(alert.type)}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    {format(new Date(alert.startDate), "dd/MM/yyyy", {
                      locale: fr,
                    })}
                  </TableCell>
                  <TableCell>
                    {format(new Date(alert.endDate), "dd/MM/yyyy", {
                      locale: fr,
                    })}
                  </TableCell>
                  <TableCell className="text-center">
                    {alert.employees.length}
                  </TableCell>
                  <TableCell className="p-0">
                    <Button
                      variant="secondary"
                      size="icon"
                      onClick={() => toggleRow(alert.id)}
                    >
                      <ChevronDown
                        className={cn(
                          "h-5 w-5 transition-transform",
                          isExpanded && "rotate-180"
                        )}
                      />
                    </Button>
                  </TableCell>
                </TableRow>
                {isExpanded && (
                  <TableRow className="hover:bg-transparent">
                    <TableCell colSpan={6} className="p-0 bg-muted">
                      <div className="px-6 py-6">
                        <div className="rounded-lg border bg-card">
                          <Table>
                            <TableHeader className="bg-transparent border-b">
                              <TableRow>
                                <TableHead>Nom et Prénom</TableHead>
                                <TableHead>Grade</TableHead>
                                <TableHead>Matricule</TableHead>
                                <TableHead>Structure</TableHead>
                                <TableHead>Statut</TableHead>
                              </TableRow>
                            </TableHeader>
                            <TableBody>
                              {alert.employees.map((employee, index) => (
                                <TableRow key={index}>
                                  <TableCell>{employee.name}</TableCell>
                                  <TableCell>-</TableCell>
                                  <TableCell>
                                    {formatRegistrationNumber(
                                      employee.registrationNumber
                                    )}
                                  </TableCell>
                                  <TableCell>-</TableCell>
                                  <TableCell>
                                    <Badge className="bg-blue-100 text-blue-800">
                                      À VENIR
                                    </Badge>
                                  </TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        </div>
                      </div>
                    </TableCell>
                  </TableRow>
                )}
              </React.Fragment>
            );
          })}
        </TableBody>
      </Table>
    </div>
  );
}


//api/alerts/route.ts
import { NextResponse } from "next/server";
import { getUpcomingTrainingAlerts } from "../../../../prisma/db";

export async function GET() {
  try {
    const alerts = await getUpcomingTrainingAlerts();
    return NextResponse.json(alerts);
  } catch (error) {
    console.error("Error fetching training alerts:", error);
    return NextResponse.json(
      { error: "Failed to fetch alerts" },
      { status: 500 }
    );
  }
}



// definitons

export type TrainingType =
  | "military"
  | "scientific"
  | "language"
  | "internal"
  | "cybersecurity";

export interface TrainingAlert {
  id: string;
  type: TrainingType;
  title: string;
  startDate: Date;
  endDate: Date;
  employees: {
    id: string;
    name: string;
    registrationNumber: string;
  }[];
}


//db.ts

function groupAlerts(alerts: TrainingAlert[]): TrainingAlert[] {
  const groupedMap = new Map<string, TrainingAlert>();

  alerts.forEach((alert) => {
    // Créer une clé basée sur le type et les dates
    const key = `${
      alert.type
    }-${alert.startDate.toISOString()}-${alert.endDate.toISOString()}-${
      alert.title
    }`;

    if (groupedMap.has(key)) {
      // Fusionner les employés si le groupe existe déjà
      const existing = groupedMap.get(key)!;
      const employeeIds = new Set(existing.employees.map((e) => e.id));

      alert.employees.forEach((employee) => {
        if (!employeeIds.has(employee.id)) {
          existing.employees.push(employee);
        }
      });
    } else {
      groupedMap.set(key, { ...alert });
    }
  });

  return Array.from(groupedMap.values());
}

// Obtenir toutes les formations à venir qui commencent dans les 3 prochains jours
export async function getUpcomingTrainingAlerts(): Promise<TrainingAlert[]> {
  const today = new Date();
  const threeDaysFromNow = addDays(today, 3);

  // Récupérer les formations militaires
  const militaryTrainings = await prisma.militaryTraining.findMany({
    where: {
      startDate: {
        gte: today,
        lte: threeDaysFromNow,
      },
      status: "IN_PROGRESS",
    },
    include: {
      Employee: {
        include: {
          rank: true,
          Structure: true,
        },
      },
      Diploma: true,
      Specialty: true,
      establishment: true,
    },
  });

  // Récupérer les formations scientifiques
  const scientificTrainings = await prisma.scientificTraining.findMany({
    where: {
      startDate: {
        gte: today,
        lte: threeDaysFromNow,
      },
      status: "IN_PROGRESS",
    },
    include: {
      Employee: {
        include: {
          rank: true,
          Structure: true,
        },
      },
      ScientificTrainingCategory: true,
      diploma: true,
      establishment: true,
    },
  });

  // Récupérer les formations linguistiques
  const languageTrainings = await prisma.languageTraining.findMany({
    where: {
      startDate: {
        gte: today,
        lte: threeDaysFromNow,
      },
      status: "IN_PROGRESS",
    },
    include: {
      Employee: {
        include: {
          rank: true,
          Structure: true,
        },
      },
      LanguageTrainingCategory: {
        include: {
          Language: true,
        },
      },
      establishment: true,
    },
  });

  // Récupérer les formations internes
  const internalTrainings = await prisma.internalTraining.findMany({
    where: {
      startDate: {
        gte: today,
        lte: threeDaysFromNow,
      },
      status: "IN_PROGRESS",
    },
    include: {
      Employee: {
        include: {
          rank: true,
          Structure: true,
        },
      },
      Platform: true,
    },
  });

  // Récupérer les activités de cybersécurité
  const cybersecurityActivities = await prisma.cybersecurityActivity.findMany({
    where: {
      startDate: {
        gte: today,
        lte: threeDaysFromNow,
      },
    },
    include: {
      employee: {
        include: {
          rank: true,
          Structure: true,
        },
      },
      establishment: true,
    },
  });

  // Formatter les données dans notre type TrainingAlert
  const alerts: TrainingAlert[] = [
    ...militaryTrainings.map((training) => ({
      id: training.id,
      type: "military" as TrainingType,
      title: `Formation Militaire: ${training.Specialty.name}`,
      startDate: training.startDate,
      endDate: training.endDate,
      employees: [
        {
          id: training.Employee.id,
          name: `${training.Employee.lastName.toUpperCase()} ${
            training.Employee.firstName
          }`,
          registrationNumber: training.Employee.registrationNumber,
          rank: training.Employee.rank,
          structure: training.Employee.Structure,
        },
      ],
    })),

    ...scientificTrainings.map((training) => ({
      id: training.id,
      type: "scientific" as TrainingType,
      title: `Formation Scientifique: ${training.ScientificTrainingCategory.name}`,
      startDate: training.startDate,
      endDate: training.endDate,
      employees: [
        {
          id: training.Employee.id,
          name: `${training.Employee.lastName.toUpperCase()} ${
            training.Employee.firstName
          }`,
          registrationNumber: training.Employee.registrationNumber,
          rank: training.Employee.rank,
          structure: training.Employee.Structure,
        },
      ],
    })),

    ...languageTrainings.map((training) => ({
      id: training.id,
      type: "language" as TrainingType,
      title: `Formation Linguistique: ${training.LanguageTrainingCategory.Language.name}`,
      startDate: training.startDate,
      endDate: training.endDate,
      employees: [
        {
          id: training.Employee.id,
          name: `${training.Employee.lastName.toUpperCase()} ${
            training.Employee.firstName
          }`,
          registrationNumber: training.Employee.registrationNumber,
          rank: training.Employee.rank,
          structure: training.Employee.Structure,
        },
      ],
    })),

    ...internalTrainings.map((training) => ({
      id: training.id,
      type: "internal" as TrainingType,
      title: `Formation Interne: ${training.Platform.name}`,
      startDate: training.startDate,
      endDate: training.endDate,
      employees: [
        {
          id: training.Employee.id,
          name: `${training.Employee.lastName.toUpperCase()} ${
            training.Employee.firstName
          }`,
          registrationNumber: training.Employee.registrationNumber,
          rank: training.Employee.rank,
          structure: training.Employee.Structure,
        },
      ],
    })),

    ...cybersecurityActivities.map((activity) => ({
      id: activity.id,
      type: "cybersecurity" as TrainingType,
      title: `Activité Cybersécurité: ${activity.event}`,
      startDate: activity.startDate,
      endDate: activity.endDate,
      employees: [
        {
          id: activity.employee.id,
          name: `${activity.employee.lastName.toUpperCase()} ${
            activity.employee.firstName
          }`,
          registrationNumber: activity.employee.registrationNumber,
          rank: activity.employee.rank,
          structure: activity.employee.Structure,
        },
      ],
    })),
  ];

  // Regrouper les alertes par critères similaires
  return groupAlerts(alerts);
}

